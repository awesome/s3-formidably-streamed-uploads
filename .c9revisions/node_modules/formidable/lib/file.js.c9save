{"ts":1357756092857,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar util = require('./util'),\n    WriteStream = require('fs').WriteStream,\n    EventEmitter = require('events').EventEmitter,\n    crypto = require('crypto');\n\nfunction File(properties) {\n  EventEmitter.call(this);\n\n  this.size = 0;\n  this.path = null;\n  this.name = null;\n  this.type = null;\n  this.hash = null;\n  this.lastModifiedDate = null;\n\n  this._writeStream = null;\n  \n  for (var key in properties) {\n    this[key] = properties[key];\n  }\n\n  if(typeof this.hash === 'string') {\n    this.hash = crypto.createHash(properties.hash);\n  }\n\n  this._backwardsCompatibility();\n}\nmodule.exports = File;\nutil.inherits(File, EventEmitter);\n\n// @todo Next release: Show error messages when accessing these\nFile.prototype._backwardsCompatibility = function() {\n  var self = this;\n  this.__defineGetter__('length', function() {\n    return self.size;\n  });\n  this.__defineGetter__('filename', function() {\n    return self.name;\n  });\n  this.__defineGetter__('mime', function() {\n    return self.type;\n  });\n};\n\nFile.prototype.open = function() {\n  this._writeStream = new WriteStream(this.path);\n};\n\nFile.prototype.write = function(buffer, cb) {\n  var self = this;\n  this._writeStream.write(buffer, function() {\n    if(self.hash) {\n      self.hash.update(buffer);\n    }\n    self.lastModifiedDate = new Date();\n    self.size += buffer.length;\n    self.emit('progress', self.size);\n    cb();\n  });\n};\n\nFile.prototype.end = function(cb) {\n  var self = this;\n  this._writeStream.end(function() {\n    if(self.hash) {\n      self.hash = self.hash.digest('hex');\n    }\n    self.emit('end');\n    cb();\n  });\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":1647}]],"length":1647}
