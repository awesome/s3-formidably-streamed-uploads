{"ts":1356044722077,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar fs = require('fs');\nvar util = require('./util'),\n    path = require('path'),\n    File = require('./file'),\n    MultipartParser = require('./multipart_parser').MultipartParser,\n    QuerystringParser = require('./querystring_parser').QuerystringParser,\n    StringDecoder = require('string_decoder').StringDecoder,\n    EventEmitter = require('events').EventEmitter,\n    Stream = require('stream').Stream;\n\nfunction IncomingForm(opts) {  \n  if (!(this instanceof IncomingForm)) return new IncomingForm;\n  EventEmitter.call(this);\n\n  opts=opts||{};\n  \n  this.error = null;\n  this.ended = false;\n\n  this.maxFieldsSize = opts.maxFieldsSize || 2 * 1024 * 1024;\n  this.keepExtensions = opts.keepExtensions || false;\n  this.uploadDir = opts.uploadDir || IncomingForm.UPLOAD_DIR;\n  this.encoding = opts.encoding || 'utf-8';\n  this.headers = null;\n  this.type = null;\n  this.hash = false;\n\n  this.bytesReceived = null;\n  this.bytesExpected = null;\n\n  this._parser = null;\n  this._flushing = 0;\n  this._fieldsSize = 0;\n};\nutil.inherits(IncomingForm, EventEmitter);\nexports.IncomingForm = IncomingForm;\n\nIncomingForm.UPLOAD_DIR = (function() {\n  var dirs = [process.env.TMP, '/tmp', process.cwd()];\n  for (var i = 0; i < dirs.length; i++) {\n    var dir = dirs[i];\n    var isDirectory = false;\n\n    try {\n      isDirectory = fs.statSync(dir).isDirectory();\n    } catch (e) {}\n\n    if (isDirectory) return dir;\n  }\n})();\n\nIncomingForm.prototype.parse = function(req, cb) {\n  this.pause = function() {\n    try {\n      req.pause();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n    return true;\n  };\n\n  this.resume = function() {\n    try {\n      req.resume();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n\n    return true;\n  };\n\n  this.writeHeaders(req.headers);\n\n  var self = this;\n  req\n    .on('error', function(err) {\n      self._error(err);\n    })\n    .on('aborted', function() {\n      self.emit('aborted');\n    })\n    .on('data', function(buffer) {\n      self.write(buffer);\n    })\n    .on('end', function() {\n      if (self.error) {\n        return;\n      }\n\n      var err = self._parser.end();\n      if (err) {\n        self._error(err);\n      }\n    });\n\n  if (cb) {\n    var fields = {}, files = {};\n    this\n      .on('field', function(name, value) {\n        fields[name] = value;\n      })\n      .on('file', function(name, file) {\n        files[name] = file;\n      })\n      .on('error', function(err) {\n        cb(err, fields, files);\n      })\n      .on('end', function() {\n        cb(null, fields, files);\n      });\n  }\n\n  return this;\n};\n\nIncomingForm.prototype.writeHeaders = function(headers) {\n  this.headers = headers;\n  this._parseContentLength();\n  this._parseContentType();\n};\n\nIncomingForm.prototype.write = function(buffer) {\n  if (!this._parser) {\n    this._error(new Error('unintialized parser'));\n    return;\n  }\n\n  this.bytesReceived += buffer.length;\n  this.emit('progress', this.bytesReceived, this.bytesExpected);\n\n  var bytesParsed = this._parser.write(buffer);\n  if (bytesParsed !== buffer.length) {\n    this._error(new Error('parser error, '+bytesParsed+' of '+buffer.length+' bytes parsed'));\n  }\n\n  return bytesParsed;\n};\n\nIncomingForm.prototype.pause = function() {\n  // this does nothing, unless overwritten in IncomingForm.parse\n  return false;\n};\n\nIncomingForm.prototype.resume = function() {\n  // this does nothing, unless overwritten in IncomingForm.parse\n  return false;\n};\n\nIncomingForm.prototype.onPart = function(part) {\n  // this method can be overwritten by the user\n  this.handlePart(part);\n};\n\nIncomingForm.prototype.handlePart = function(part) {\n  var self = this;\n\n  if (part.filename === undefined) {\n    var value = ''\n      , decoder = new StringDecoder(this.encoding);\n\n    part.on('data', function(buffer) {\n      self._fieldsSize += buffer.length;\n      if (self._fieldsSize > self.maxFieldsSize) {\n        self._error(new Error('maxFieldsSize exceeded, received '+self._fieldsSize+' bytes of field data'));\n        return;\n      }\n      value += decoder.write(buffer);\n    });\n\n    part.on('end', function() {\n      self.emit('field', part.name, value);\n    });\n    return;\n  }\n\n  this._flushing++;\n\n  var file = new File({\n    path: this._uploadPath(part.filename),\n    name: part.filename,\n    type: part.mime,\n    hash: self.hash\n  });\n\n  this.emit('fileBegin', part.name, file);\n\n  file.open();\n\n  part.on('data', function(buffer) {\n    self.pause();\n    file.write(buffer, function() {\n      self.resume();\n    });\n  });\n\n  part.on('end', function() {\n    file.end(function() {\n      self._flushing--;\n      self.emit('file', part.name, file);\n      self._maybeEnd();\n    });\n  });\n};\n\nIncomingForm.prototype._parseContentType = function() {\n  if (!this.headers['content-type']) {\n    this._error(new Error('bad content-type header, no content-type'));\n    return;\n  }\n\n  if (this.headers['content-type'].match(/urlencoded/i)) {\n    this._initUrlencoded();\n    return;\n  }\n\n  if (this.headers['content-type'].match(/multipart/i)) {\n    var m;\n    if (m = this.headers['content-type'].match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i)) {\n      this._initMultipart(m[1] || m[2]);\n    } else {\n      this._error(new Error('bad content-type header, no multipart boundary'));\n    }\n    return;\n  }\n\n  this._error(new Error('bad content-type header, unknown content-type: '+this.headers['content-type']));\n};\n\nIncomingForm.prototype._error = function(err) {\n  if (this.error) {\n    return;\n  }\n\n  this.error = err;\n  this.pause();\n  this.emit('error', err);\n};\n\nIncomingForm.prototype._parseContentLength = function() {\n  if (this.headers['content-length']) {\n    this.bytesReceived = 0;\n    this.bytesExpected = parseInt(this.headers['content-length'], 10);\n    this.emit('progress', this.bytesReceived, this.bytesExpected);\n  }\n};\n\nIncomingForm.prototype._newParser = function() {\n  return new MultipartParser();\n};\n\nIncomingForm.prototype._initMultipart = function(boundary) {\n  this.type = 'multipart';\n\n  var parser = new MultipartParser(),\n      self = this,\n      headerField,\n      headerValue,\n      part;\n\n  parser.initWithBoundary(boundary);\n\n  parser.onPartBegin = function() {\n    part = new Stream();\n    part.readable = true;\n    part.headers = {};\n    part.name = null;\n    part.filename = null;\n    part.mime = null;\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onHeaderField = function(b, start, end) {\n    headerField += b.toString(self.encoding, start, end);\n  };\n\n  parser.onHeaderValue = function(b, start, end) {\n    headerValue += b.toString(self.encoding, start, end);\n  };\n\n  parser.onHeaderEnd = function() {\n    headerField = headerField.toLowerCase();\n    part.headers[headerField] = headerValue;\n\n    var m;\n    if (headerField == 'content-disposition') {\n      if (m = headerValue.match(/name=\"([^\"]+)\"/i)) {\n        part.name = m[1];\n      }\n\n      part.filename = self._fileName(headerValue);\n    } else if (headerField == 'content-type') {\n      part.mime = headerValue;\n    }\n\n    headerField = '';\n    headerValue = '';\n  };\n\n  parser.onHeadersEnd = function() {\n    self.onPart(part);\n  };\n\n  parser.onPartData = function(b, start, end) {\n    part.emit('data', b.slice(start, end));\n  };\n\n  parser.onPartEnd = function() {\n    part.emit('end');\n  };\n\n  parser.onEnd = function() {\n    self.ended = true;\n    self._maybeEnd();\n  };\n\n  this._parser = parser;\n};\n\nIncomingForm.prototype._fileName = function(headerValue) {\n  var m = headerValue.match(/filename=\"(.*?)\"($|; )/i)\n  if (!m) return;\n\n  var filename = m[1].substr(m[1].lastIndexOf('\\\\') + 1);\n  filename = filename.replace(/%22/g, '\"');\n  filename = filename.replace(/&#([\\d]{4});/g, function(m, code) {\n    return String.fromCharCode(code);\n  });\n  return filename;\n};\n\nIncomingForm.prototype._initUrlencoded = function() {\n  this.type = 'urlencoded';\n\n  var parser = new QuerystringParser()\n    , self = this;\n\n  parser.onField = function(key, val) {\n    self.emit('field', key, val);\n  };\n\n  parser.onEnd = function() {\n    self.ended = true;\n    self._maybeEnd();\n  };\n\n  this._parser = parser;\n};\n\nIncomingForm.prototype._uploadPath = function(filename) {\n  var name = '';\n  for (var i = 0; i < 32; i++) {\n    name += Math.floor(Math.random() * 16).toString(16);\n  }\n\n  if (this.keepExtensions) {\n    var ext = path.extname(filename);\n    ext     = ext.replace(/(\\.[a-z0-9]+).*/, '$1')\n\n    name += ext;\n  }\n\n  return path.join(this.uploadDir, name);\n};\n\nIncomingForm.prototype._maybeEnd = function() {\n  if (!this.ended || this._flushing) {\n    return;\n  }\n\n  this.emit('end');\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":8866}]],"length":8866}
