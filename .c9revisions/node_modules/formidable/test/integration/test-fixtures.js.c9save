{"ts":1356028539894,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var hashish = require('hashish');\nvar fs = require('fs');\nvar findit = require('findit');\nvar path = require('path');\nvar http = require('http');\nvar net = require('net');\nvar assert = require('assert');\n\nvar common = require('../common');\nvar formidable = common.formidable;\n\nvar server = http.createServer();\nserver.listen(common.port, findFixtures);\n\nfunction findFixtures() {\n  var fixtures = [];\n  findit\n    .sync(common.dir.fixture + '/js')\n    .forEach(function(jsPath) {\n      if (!/\\.js$/.test(jsPath)) return;\n\n      var group = path.basename(jsPath, '.js');\n      hashish.forEach(require(jsPath), function(fixture, name) {\n        fixtures.push({\n          name    : group + '/' + name,\n          fixture : fixture,\n        });\n      });\n    });\n\n  testNext(fixtures);\n}\n\nfunction testNext(fixtures) {\n  var fixture = fixtures.shift();\n  if (!fixture) return server.close();\n\n  var name    = fixture.name;\n  var fixture = fixture.fixture;\n\n  uploadFixture(name, function(err, parts) {\n    if (err) throw err;\n\n    fixture.forEach(function(expectedPart, i) {\n      var parsedPart = parts[i];\n      assert.equal(parsedPart.type, expectedPart.type);\n      assert.equal(parsedPart.name, expectedPart.name);\n\n      if (parsedPart.type === 'file') {\n        var filename = parsedPart.value.name;\n        assert.equal(filename, expectedPart.filename);\n      }\n    });\n\n    testNext(fixtures);\n  });\n};\n\nfunction uploadFixture(name, cb) {\n  server.once('request', function(req, res) {\n    var form = new formidable.IncomingForm();\n    form.uploadDir = common.dir.tmp;\n    form.parse(req);\n\n    function callback() {\n      var realCallback = cb;\n      cb = function() {};\n      realCallback.apply(null, arguments);\n    }\n\n    var parts = [];\n    form\n      .on('error', callback)\n      .on('fileBegin', function(name, value) {\n        parts.push({type: 'file', name: name, value: value});\n      })\n      .on('field', function(name, value) {\n        parts.push({type: 'field', name: name, value: value});\n      })\n      .on('end', function() {\n        callback(null, parts);\n      });\n  });\n\n  var socket = net.createConnection(common.port);\n  var file = fs.createReadStream(common.dir.fixture + '/http/' + name);\n\n  file.pipe(socket);\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":2240}]],"length":2240}
