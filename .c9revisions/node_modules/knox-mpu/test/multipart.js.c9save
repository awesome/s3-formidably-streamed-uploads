{"ts":1356028923899,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var assert = require('assert'),\n    fs = require('fs'),\n    knox = require('knox'),\n    os = require('os'),\n    path = require('path'),\n    MultiPartUpload = require('..'),\n    mockstream = require('mockstream');\n\ndescribe('Knox multipart form uploads', function() {\n\n    var client = null;\n    \n    before(function(done) {\n        try {\n            var auth = require('./auth.json');\n            client = knox.createClient(auth);\n            done();\n        } catch (err) {\n            done('Could not create Knox client - please provide an ./auth.json file');\n        }\n    });\n    \n    it('should be able to pipe a stream directly to Amazon S3 using the multi part upload', function(done) {\n        var testLength = 7242880,\n            chunkSize = 2048,\n            stream = new mockstream.MockDataStream({chunkSize: chunkSize, streamLength: testLength}),\n            opts = {\n                client: client, objectName: Date.now() + '.txt', stream: stream\n            },\n            mpu = null;\n            \n        // Upload the file\n        mpu = new MultiPartUpload(opts, function(err, body) {\n            if (err) return done(err);\n            assert.equal(body['Key'], opts.objectName);\n            \n            // Clean up after ourselves\n            client.deleteFile(opts.objectName, function(err, res) {\n                if (err) return done('Could not delete file [' + err + ']');\n                return done();\n            });\n            \n        }); \n           \n        stream.start(); \n    });\n    \n    it('should be able to upload a small file to S3', function(done) {\n        \n        var testLength = 242880,\n            chunkSize = 2048,\n            stream = new mockstream.MockDataStream({chunkSize: chunkSize, streamLength: testLength}),\n            opts = {\n                client: client, objectName: Date.now() + '.txt', stream: stream\n            },\n            mpu = null;\n            \n        // Upload the file\n        mpu = new MultiPartUpload(opts, function(err, body) {\n            if (err) return done(err);\n            assert.equal(body['Key'], opts.objectName);\n            \n            // Clean up after ourselves\n            client.deleteFile(opts.objectName, function(err, res) {\n                if (err) return done('Could not delete file [' + err + ']');\n                return done();\n            });\n            \n        }); \n           \n        stream.start();\n        \n    });\n    \n    it('should be able to upload a file to S3', function(done) {\n        \n        // Create a temporary file of data for uploading\n        var tempFile = path.resolve(path.join(os.tmpDir(), 'knoxmpu-file-upload-test.txt')),\n            writeStream = fs.createWriteStream(tempFile),\n            mockDataStream = new mockstream.MockDataStream({chunkSize: 2048, streamLength: 6242880});            \n        \n        mockDataStream.on('data', function(chunk) {\n            writeStream.write(chunk);\n        });\n        \n        mockDataStream.on('end', function() {\n            writeStream.end();\n        });\n        \n        writeStream.on('error', done);\n        mockDataStream.start();\n\n        // Upload the file once we have a temporary file\n        writeStream.on('close', function() {\n            \n            // Upload the file\n            var opts = {\n                    client: client, objectName: Date.now() + '.txt', file: tempFile\n                },\n                mpu = null;\n\n            // Upload the file\n            mpu = new MultiPartUpload(opts, function(err, body) {\n                if (err) return done(err);\n                assert.equal(body['Key'], opts.objectName);\n                assert.equal(body.size, 6242880);\n\n                // Clean up after ourselves\n                client.deleteFile(opts.objectName, function(err, res) {                    \n                    fs.unlink(tempFile, function(err2) {\n                        return done((err || err2) ? 'Could not clean up after test' : null);\n                    });\n                });\n\n            });            \n        });\n        \n    });\n    \n})"]],"start1":0,"start2":0,"length1":0,"length2":4064}]],"length":4064}
