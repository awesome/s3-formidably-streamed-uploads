// Generated by CoffeeScript 1.4.0
(function() {
  var BufferedStream, MultiPartUpload, async, formidable, fs, knox, util;

  async = require('async');

  formidable = require('formidable');

  knox = require('knox');

  MultiPartUpload = require('knox-mpu');

  util = require('util');

  fs = require('fs');

  BufferedStream = require('morestreams').BufferedStream;

  module.exports = function(options) {
    var handleFilePart, handleFileUpload, pushToS3, unlinkTempfile;
    options = options || {};
    options.uploadDir = options.uploadDir || null;
    options.processFilePart = options.processFilePart || function(filePartStream, done) {
      var bufferedStream;
      bufferedStream = new BufferedStream();
      filePartStream.pipe(bufferedStream);
      return done(null, [bufferedStream]);
    };
    pushToS3 = function(readStream, cb) {
      var mpu;
      console.log("[ streamed-s3-upload ] Pushing to S3 (" + readStream.filename + ")");
      return mpu = new MultiPartUpload({
        client: options.knoxClient,
        objectName: readStream.filename,
        stream: readStream
      }, cb);
    };
    handleFilePart = function(filePartStream, cb) {
      return options.processFilePart(filePartStream, function(err, readStreams) {
        if (!Array.isArray(readStreams)) {
          readStreams = [readStreams];
        }
        return async.map(readStreams, pushToS3, cb);
      });
      /*
          async.forEach thumbnailSizes,
            (size, cb) ->
              saveThumbnail part, size, cb
            (err) ->
              cb err
      */

    };
    unlinkTempfile = function(file, form) {
      console.info("[ streamed-s3-upload ] unlinking " + file.path);
      return fs.unlink(file.path, function(err) {
        if (err != null) {
          return form.emit('error', error);
        }
      });
    };
    handleFileUpload = function(req, done) {
      var form;
      form = new formidable.IncomingForm({
        uploadDir: options.uploadDir
      });
      form.keepExtensions = true;
      form.on('s3-upload-completed', function(s3res) {
        console.info("[ streamed-s3-upload ] finished uploading");
        return done(null, s3res);
      });
      form.on('error', function(err) {
        console.info("[ streamed-s3-upload ] an error occured");
        console.error(err);
        return done(err, null);
      });
      /*
          Lookup the 'file' or 'fileBegin' events instead:
          https://github.com/felixge/node-formidable#file
      */

      /*  
      form.on 'fileBegin', (name, file) ->
        console.info "[ streamed-s3-upload ] file begins uploading"
        try
          handleFile file, (err, s3res) ->
            if err? 
              console.dir err
              form.emit 'error', err
            else 
              console.dir s3res
              form.emit 's3-upload-completed', null, s3res
              
            #unlinkTempfile file, form  
        catch error
          form.emit 'error', error
          #unlinkTempfile file, form
      */

      form.onPart = function(part) {
        console.info("[ streamed-s3-upload ] onPart begin");
        try {
          if (!part.filename) {
            return form.handlePart(part);
          } else {
            return handleFilePart(part, function(err, s3res) {
              if (err != null) {
                return form.emit('error', err);
              } else {
                console.dir(s3res);
                return form.emit('s3-upload-completed', null, s3res);
              }
            });
          }
        } catch (error) {
          return form.emit('error', error);
        }
      };
      return form.parse(req);
    };
    return {
      handleFileUpload: handleFileUpload
    };
  };

}).call(this);
