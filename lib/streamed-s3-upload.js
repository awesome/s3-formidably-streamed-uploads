// Generated by CoffeeScript 1.4.0
(function() {
  var MultiPartUpload, async, formidable, fs, knox, util;

  async = require('async');

  formidable = require('formidable');

  knox = require('knox');

  MultiPartUpload = require('knox-mpu');

  util = require('util');

  fs = require('fs');

  module.exports = function(options) {
    var handleFile, handleFileUpload, pushToS3, unlinkTempfile;
    options = options || {};
    options.uploadDir = options.uploadDir || null;
    options.processFile = options.processFile || function(file, done) {
      return done(null, [fs.createReadStream(file.path)]);
    };
    pushToS3 = function(readStream, cb) {
      var mpu;
      console.log("[ streamed-s3-upload ] Pushing to S3 (" + readStream.filename + ")");
      return mpu = new MultiPartUpload({
        client: options.knoxClient,
        objectName: readStream.filename,
        stream: readStream
      }, cb);
    };
    handleFile = function(file, cb) {
      return options.processFile(file, function(err, readStreams) {
        if (!Array.isArray(readStreams)) {
          readStreams = [readStreams];
        }
        return async.map(readStreams, pushToS3, cb);
      });
      /*
          async.forEach thumbnailSizes,
            (size, cb) ->
              saveThumbnail part, size, cb
            (err) ->
              cb err
      */

    };
    unlinkTempfile = function(file, form) {
      console.info("[ streamed-s3-upload ] unlinking " + file.path);
      return fs.unlink(file.path, function(err) {
        if (err != null) {
          return form.emit('error', error);
        }
      });
    };
    handleFileUpload = function(req, done) {
      var form;
      form = new formidable.IncomingForm({
        uploadDir: options.uploadDir
      });
      form.keepExtensions = true;
      form.on('s3-upload-completed', function(s3res) {
        console.info("[ streamed-s3-upload ] finished uploading");
        return done(null, s3res);
      });
      form.on('error', function(err) {
        console.error(err);
        return done(err, null);
      });
      /*
          Lookup the 'file' or 'fileBegin' events instead:
          https://github.com/felixge/node-formidable#file
      */

      form.on('file', function(name, file) {
        return console.info("[ streamed-s3-upload ] file begins uploading");
        /*
              try
                handleFile file, (err, s3res) ->
                  if err? 
                    console.dir err
                    form.emit 'error', err
                  else 
                    console.dir s3res
                    form.emit 's3-upload-completed', null, s3res
                    
                  unlinkTempfile file, form  
              catch error
                form.emit 'error', error
                unlinkTempfile file, form
        */

      });
      /*
          form.onPart = (part) ->
            console.log '**onPart'
            if not part.filename then form.handlePart part
            else
              handleFilePart part, (err, s3res) ->          
                if err? 
                  console.dir err
                  form.emit 'error', err
                else 
                  console.dir s3res
                  form.emit 's3-upload-completed', null, s3res
      */

      return form.parse(req);
    };
    return {
      handleFileUpload: handleFileUpload
    };
  };

}).call(this);
